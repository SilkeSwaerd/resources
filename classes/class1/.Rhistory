xmdl <- lm(y ~ x, data = mydf)
xmdl <- lm(y ~ 1 + x, data = mydf)
xmdl_null <- lm(y ~ 1, data = mydf)
coef(xmdl_null)
mean(y)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
#set seed value to make your examples match the book:
set.seed(666)
ppt_ids <- gl(6, 20)
ppt_ids
it_ids <- gl(20, 1)
it_ids
it_ids <- rep(it_ids, 6)
it_ids
length(ppt_ids) #6 participants, each responds to 20 items
length(it_ids) #20 items, each for 6 participants
logfreqs <- round(rexp(20) * 5, 2)
logfruqes
logfreqs
logfreqs <- rep(logfreqs, 6)
length(logfreqs)
logfruqs
logfreqs
xdata <- tibble(ppt = ppt_ids, item = it_ids, freq = logfreqs)
xdata
xdata$int <- 300
View(xdata)
ppt_ints <- rnorm(6, sd = 40)
ppt_ints
xdata$ppt_ints <- rep(ppt_ints, each = 20)
xdara
xdata
item_ints <- rnorm(20, sd = 20)
item_ints
item_ints <- rep(item_ints, times = 6)
length(item_ints)
item_ints <- rep(item_ints, times = 6)
length(item_ints)
length(item_ints)
rm(list=ls())
library(tidyverse)
rm(list=ls())
#set seed value to make your examples match the book:
set.seed(666)
ppt_ids <- gl(6, 20)
ppt_ids
it_ids <- gl(20, 1)
it_ids
it_ids <- rep(it_ids, 6)
it_ids
length(ppt_ids) #6 participants, each responds to 20 items
length(it_ids) #20 items, each for 6 participants
logfreqs <- round(rexp(20) * 5, 2)
logfreqs
logfreqs <- rep(logfreqs, 6)
length(logfreqs)
logfreqs
xdata <- tibble(ppt = ppt_ids, item = it_ids, freq = logfreqs)
xdata
xdata$int <- 300
ppt_ints <- rnorm(6, sd = 40)
ppt_ints
xdata$ppt_ints <- rep(ppt_ints, each = 20)
xdata
item_ints <- rnorm(20, sd = 20)
item_ints
item_ints <- rep(item_ints, times = 6)
length(item_ints)
length(item_ints)
xdata$item_ints <- item_ints
xdata$error(120, sd = 20)
xdata$error <- rnorm(120, sd = 20)
xdata$effect <- (-5) * xdata$freq
xdata %>% head(4)
xdata <-  mutate(xdata,
dur = int + ppt_ints + item_ints + error + effect)
xreal <- select(xdata, -(int:effect))
xreal
library(lme4)
xmdl <- lmer(dur ~ freq + (1|ppt) + (1|item), data = xreal, REML = FALSE)
xmdl <- lmer(dur ~ freq + (1|ppt) + (1|item), data = xreal, REML = FALSE)
summary(xmdl)
# Load packages
pacman::p_load(tidyverse, lme4, boot, caret, pROC, snakecase)
# Set working directory
#setwd("")
# Load the data -remember to save the file from praat in your working directory
aphasia <- read_csv("magicdata.txt") %>%
filter(soundname != "soundname") %>%
# Add conditions from soundnames:
mutate(
condition = str_extract(soundname, "Aphasia|Control|Secret"),
npause = as.numeric(npause),
`dur(s)` = as.numeric(`dur(s)`),
# Add the rate of pauses (number of pauses divided by duration)
pauserate = npause / `dur(s)`
)
# Load packages
pacman::p_load(tidyverse, lme4, boot, caret, pROC, snakecase)
# Set working directory
#setwd("")
# Load the data -remember to save the file from praat in your working directory
aphasia <- read_csv("magicdata.txt") %>%
filter(soundname != "soundname") %>%
# Add conditions from soundnames:
mutate(
condition = str_extract(soundname, "Aphasia|Control|Secret"),
npause = as.numeric(npause),
`dur(s)` = as.numeric(`dur(s)`),
# Add the rate of pauses (number of pauses divided by duration)
pauserate = npause / `dur(s)`
)
# Load packages
pacman::p_load(tidyverse, lme4, boot, caret, pROC, snakecase)
# Set working directory
#setwd("")
# Load the data -remember to save the file from praat in your working directory
aphasia <- read_csv("magicdata.txt") %>%
filter(soundname != "soundname") %>%
# Add conditions from soundnames:
mutate(
condition = str_extract(soundname, "Aphasia|Control|Secret"),
npause = as.numeric(npause),
`dur(s)` = as.numeric(`dur(s)`),
# Add the rate of pauses (number of pauses divided by duration)
pauserate = npause / `dur(s)`
)
# Fix column names
colnames(aphasia) <- to_any_case(colnames(aphasia), "snake")
View(mydf)
rm(list=ls())
rm(list=ls())
# Load packages
pacman::p_load(tidyverse, lme4, boot, caret, pROC, snakecase)
# Set working directory
#setwd("")
# Load the data -remember to save the file from praat in your working directory
aphasia <- read_csv("magicdata.txt") %>%
filter(soundname != "soundname") %>%
# Add conditions from soundnames:
mutate(
condition = str_extract(soundname, "Aphasia|Control|Secret"),
npause = as.numeric(npause),
`dur(s)` = as.numeric(`dur(s)`),
# Add the rate of pauses (number of pauses divided by duration)
pauserate = npause / `dur(s)`
)
# Fix column names
colnames(aphasia) <- to_any_case(colnames(aphasia), "snake")
# Define function to create a plot of the specific column based on condition
analysis <- function(title, JIT) {
ggplot(aphasia, aes(condition, JIT, fill = condition )) +
labs(title = title) +
geom_boxplot() +
theme(legend.position="none")
}
# Make all numeric columns _actually_ numeric
aphasia <- aphasia %>%
mutate(
speechrate_nsyll_dur = as.numeric(speechrate_nsyll_dur),
nsyll = as.numeric(nsyll),
npause = as.numeric(npause),
dur_s = as.numeric(dur_s),
phonationtime_s = as.numeric(phonationtime_s),
articulation_rate_nsyll_phonationtime = as.numeric(articulation_rate_nsyll_phonationtime),
asd_speakingtime_nsyll = as.numeric(asd_speakingtime_nsyll),
condition = as.factor(condition)
)
# Arranging plots in a grid using the package gridExtra
pacman::p_load(gridExtra)
grid.arrange(
analysis("Speech rate", aphasia$speechrate_nsyll_dur),
analysis("N pauses", aphasia$npause),
analysis("N syllables", aphasia$nsyll),
analysis("Phonation time", aphasia$phonationtime_s),
analysis("Articulation rate", aphasia$articulation_rate_nsyll_phonationtime),
analysis("Speaking time", aphasia$asd_speakingtime_nsyll),
analysis("Pause rate", aphasia$pauserate)
)
View(aphasia)
# Making a "training set" - We want to ommit the "secret case", as our model should not include this in its training.
# Training data (Aphasia and Control)
trainingset <- aphasia %>%
filter(condition != "Secret")
# Test data (Secret)
testset <- aphasia %>%
filter(condition == "Secret")
# Check the format of your data
str(trainingset)
# Changing the labels of your training data: Make Control into "0" and Aphasia into "1"
trainingset <- trainingset %>%
mutate(condition = as.factor(if_else(condition == "Control", 0, 1)))
# Now we can see that our condition is a 2-level factor with "0" or "1"
str(trainingset$condition)
# Releveling the condition factor to use "0" (Control) as the reference (see how it's used with ?relevel)
trainingset <- trainingset %>%
mutate(
condition = relevel(condition, "0")
)
# Creating the glm model:
model <- glm(condition ~ articulation_rate_nsyll_phonationtime, data = trainingset, family = binomial())
# Looking at the results:
summary(model)
# Adding the predicted probabilities:
trainingset <- trainingset %>%
mutate(predictions_perc = inv.logit(predict(model)))
# Using the BIC() function, evaluate the models side-by-side
# The smaller the value, the better the model
BIC(model)
# Adding the predicted probabilities:
trainingset <- trainingset %>%
mutate(predictions_perc = inv.logit(predict(model)))
# Assigning predicted conditions based on their probabilities (remember to make it a factor)
trainingset <- trainingset %>%
mutate(prediction = as.factor(if_else(predictions_perc<0.5, 0, 1)))
# Making a confusion matrix:
conf_matrix <- confusionMatrix(trainingset$prediction, reference = trainingset$condition, positive= "1")
conf_matrix$table %>%
as_tibble() %>%
ggplot() +
aes(Prediction, Reference, fill=n, label=n) +
geom_tile() +
geom_text(color="white") +
coord_cartesian(expand=FALSE) +
theme_minimal() +
theme(legend.position = "none")
# Predictions on the test dataset:
testset <- testset %>%
mutate(
model_predictions_perc = inv.logit(predict(model, testset, na.action = na.omit, allow.new.levels = T ))
)
# Based on the probability, convert to 0s and 1s
testset <- testset %>%
mutate(
model_predictions = as.factor(if_else(model_predictions_perc < 0.5, 0, 1))
)
# ROC curve
rocCurve <- roc(response = trainingset$condition, trainingset$predictions_perc)
# Area under that curve
auc(rocCurve)
# Confidence interval
ci(rocCurve)
# Plotting the ROC curve over the chance (diagonal line) level
plot(rocCurve, legacy.axes = TRUE)
# Predictions on the test dataset:
testset <- testset %>%
mutate(
model_predictions_perc = inv.logit(predict(model, testset, na.action = na.omit, allow.new.levels = T ))
)
# Based on the probability, convert to 0s and 1s
testset <- testset %>%
mutate(
model_predictions = as.factor(if_else(model_predictions_perc < 0.5, 0, 1))
)
# Predictions on the test dataset:
testset <- testset %>%
mutate(
model_predictions_perc = inv.logit(predict(model, testset, na.action = na.omit, allow.new.levels = T ))
)
# Based on the probability, convert to 0s and 1s
testset <- testset %>%
mutate(
model_predictions = as.factor(if_else(model_predictions_perc < 0.5, 0, 1))
)
# See which files were predicted as Aphasic ("1") and Control ("0")
secretTest1 == 1
# See which files were predicted as Aphasic ("1") and Control ("0")
aphasia$secretTest1 == 1
# See which files were predicted as Aphasic ("1") and Control ("0")
aphasia$secretTest1 == 0
# See which files were predicted as Aphasic ("1") and Control ("0")
filter(aphasia, secretTest*) == 1
model2 <- glm(condition ~ pauserate, data = trainingset, family = binomial())
summary(model2)
trainingset <- trainingset %>%
mutate(predictions_perc = inv.logit(predict(model2)))
BIC(model2)
# Using the BIC() function, evaluate the models side-by-side
# The smaller the value, the better the model
BIC(model)
trainingset <- trainingset %>%
mutate(predictions_perc = inv.logit(predict(model2)))
summary(model2)
# Looking at the results:
summary(model)
knitr::opts_chunk$set(echo = TRUE)
install.packages(lme4)
install.packages("lme4")
library(lme4)
```{r}
library(lme4)
politeness = read.csv("https://www.bodowinter.com/tutorial/politeness_data.csv")
politeness
head(politeness)
tail(politeness)
summary(politeness)
colnames(politeness)
str(politeness)
which(is.na(politeness$frequency))
which(!complete.cases(politeness))
boxplot(frequency ~ attitude*gender, col=c("white", "lightgray"), politeness)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(lme4)
politeness = read.csv("https://www.bodowinter.com/tutorial/politeness_data.csv")
politeness
head(politeness)
tail(politeness)
summary(politeness)
str(politeness)
colnames(politeness)
which(is.na(politeness$frequency)) # or
which(!complete.cases(politeness))
boxplot(frequency ~ attitude*gender, col=c("white", "lightgray"), politeness)
knitr::opts_chunk$set(echo = TRUE)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
library(lme4)
politeness = read.csv("https://www.bodowinter.com/tutorial/politeness_data.csv")
politeness
head(politeness)
tail(politeness)
summary(politeness)
str(politeness)
colnames(politeness)
which(is.na(politeness$frequency)) # or
which(!complete.cases(politeness))
boxplot(frequency ~ attitude*gender, col=c("white", "lightgray"), politeness)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
library(pacman)
pacman::p_load(tidyverse, ggplot2)
pacman::p_load(tidyverse, ggplot2)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
install.packages(lme4)
library(pacman)
library(lme4)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
?lme4
summary(politeness.model)
?lmer
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
install.packages(lme4)
library(lme4)
library(pacman)
pacman::p_load(tidyverse, ggplot2)
politeness = read.csv("https://www.bodowinter.com/tutorial/politeness_data.csv")
politeness
head(politeness)
tail(politeness)
summary(politeness)
str(politeness)
colnames(politeness)
which(is.na(politeness$frequency)) # or
which(!complete.cases(politeness))
boxplot(frequency ~ attitude*gender, col=c("white", "lightgray"), politeness)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
politeness.model = lmer(frequency ~ attitude +
(1|subject) + (1|scenario), data=politeness)
politeness.model = lmer(frequency ~ attitude + gender + (1|subject) + (1|scenario), data = politeness)
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/Users/silke/downloaded/class1.Rmd")
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
install.packages("rstanarm")
library(rstanarm)
install.packages("rstanarm")
install.packages("rstanarm")
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/Users/pernillebrams/Desktop/AARHUS_UNIVERSITY/instructor_2024/methods-2")
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
install.packages("rstanarm")
library(rstanarm)
install.packages("rstanarm")
install.packages("rstanarm")
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/Users/pernillebrams/Desktop/AARHUS_UNIVERSITY/instructor_2024/methods-2")
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/silke/OneDrive/Skrivbord/Aarhus Universitet/VT24/Methods 2 - General linear model/resources/classes")
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
install.packages("rstanarm")
library(rstanarm)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/silke/OneDrive/Skrivbord/Aarhus Universitet/VT24/Methods 2 - General linear model/resources/classes")
R.Version()
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
install.packages("rstanarm")
library(rstanarm)
library(rstanarm)
library(rstanarm)
R.Version()
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/silke/OneDrive/Skrivbord/Aarhus Universitet/VT24/Methods 2 - General linear model/resources/classes")
R.Version()
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
install.packages("rstanarm")
library(rstanarm)
install.packages("rstanarm")
library(rstanarm)
gwd()
setwd("C:/Users/silke/OneDrive/Skrivbord/Aarhus Universitet/VT24/Methods 2 - General linear model/resources/classes/class1")
library(rstanarm)
("ggpubr")
install.packages("ggpubr")
install.packages("stringr")
pacman::p_load(tidyverse,
ggpubr,
ggplot2,
stringr,
rtstanarm) # this time I'm just giving you the code
R.Version()
version
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
remove.packages("rstanarm")
install.packages("rstanarm")
library(rstanarm)
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "C:/Users/silke/OneDrive/Skrivbord/Aarhus Universitet/VT24/Methods 2 - General linear model/resources/classes")
R.Version()
# Make sure this guy is installed/updated (if you've alreadygot rstanarm installed, you just need to load it in using either library() or p_load() as below)
remove.packages("rstanarm")
install.packages("rstanarm")
library(rstanarm)
# Load data
hibbs <- read.table("data/ElectionsEconomy/data/hibbs.dat", header = TRUE)
# Make scatterplot
plot(hibbs$growth, hibbs$vote, xlab="Average recent growth in personal income",
ylab="Incumbent party's vote share")
# Estimate regression y = a + bx + error
M1 <- stan_glm(vote ~ growth, data=hibbs)
# Add a fitted line to the graph
abline(coef(M1), col="gray") # needs to be run with the plot() code above - running the whole chunk is the easiest way
# Display the fitted model
print(M1)
# Basic plot with ggplot2
ggplot(hibbs, aes(x = growth, y = vote)) +
geom_point() +  # Add points
labs(
x = "Average recent growth in personal income",
y = "Incumbent party's vote share",
title = "Relationship between Income Growth and Vote Share",
subtitle = "Data from Hibbs Dataset"
) +
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
plot.subtitle = element_text(hjust = 0.5)  # Center the subtitle
) +
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
pacman::p_load(tidyverse,
ggpubr,
ggplot2,
stringr) # this time I'm just giving you the code
# Load data
hibbs <- read.table("data/ElectionsEconomy/data/hibbs.dat", header = TRUE)
# Make scatterplot
plot(hibbs$growth, hibbs$vote, xlab="Average recent growth in personal income",
ylab="Incumbent party's vote share")
# Estimate regression y = a + bx + error
M1 <- stan_glm(vote ~ growth, data=hibbs)
# Add a fitted line to the graph
abline(coef(M1), col="gray") # needs to be run with the plot() code above - running the whole chunk is the easiest way
# Display the fitted model
print(M1)
# Basic plot with ggplot2
ggplot(hibbs, aes(x = growth, y = vote)) +
geom_point() +  # Add points
labs(
x = "Average recent growth in personal income",
y = "Incumbent party's vote share",
title = "Relationship between Income Growth and Vote Share",
subtitle = "Data from Hibbs Dataset"
) +
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
plot.subtitle = element_text(hjust = 0.5)  # Center the subtitle
) +
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
set.seed(1998) # setting a seed (in the best year ever??) - this way, even though it's random, you'll get reproducible results next time you run this with this seed
set.seed(1998) # setting a seed (in the best year ever??) - this way, even though it's random, you'll get reproducible results next time you run this with this seed
simulated_data <-  rnorm(10, 4, 2)
simulated_data()
simulated_dat
simulated_data
ggplot(aes(x = rnorm))
ggplot(aes(data = simulated_data)) +
gghistogram()
ggplot(aes(x = data = simulated_data)) +
ggplot(aes(x = data, = simulated_data)) +
ggplot(aes(x = data, data = simulated_data)) +
geom_hist()
simulated_data <- c(stimulated_data)
simulated_data <-  rnorm(10, 4, 2)
simulated_data
df <- c(5.606633, 5.542228, 8.032353, 2.124574, 4.928519, 3.909756, 5.454319, 4.178747, 2.317168, 1.483910)
ggplot(aes(x = df, data = simulated_data)) +
geom_hist()
df
